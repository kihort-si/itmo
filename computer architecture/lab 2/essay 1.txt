В лекции о будущем программирования Виктор Брет пытается предсказать развитие вычислительной техники и программирования в течение следующих десятилетий, рассуждая с точки зрения специалиста из прошлого (примерно 1970-х годов). Он выделяет четыре основные концепции развития программирования: прямое управление данными – программист не пишет конкретные машинные инструкции, а использует разные виды ввода информации, к которым программа должна адаптироваться; программист описывает цель, а не способ ее достижения – машина сама подберёт способ выполнения, а программист опишет лишь то, что он хочет достичь; пространственное представление программ вместо текста – вместо больших текстовых файлов код будет организован в виде визуальных структур в графическом формате; параллельное программирование – последовательное выполнение инструкций устаревает и будущее за многопоточными системами. При этом он подчеркивает, что в современном мире технологии развиваются быстро, а мышление людей – медленно, они сопротивляются новому, предпочитая использовать привычные и проверенные способы. По его мнению, залогом успеха программистов прошлого было отсутствие готовых решений, что вынуждало их использовать новые подходы, проводить эксперименты и внедрять альтернативные решения.
На мой взгляд, главная идея Виктора – сопротивление новым решениям, безусловно актуальна сегодня. Мне кажется, это в целом особенность человеческого мозга, когда он встречает что-то новое и неизвестное, ему кажется это слишком опасным, и он решает не дистанцироваться от них. Однако, именно желание окунуться в неисследованное является двигателем прогресса. Мы неизбежно должны изучать что-то новое, строить гипотезы, экспериментировать, если хотим расти и развиваться. Некоторые из его идей активно используются в различных системах, но скорее являются спецификой некоторых областей, например, машинное обучение или анализ данных. Тем не менее сказать, что индустрия ушла от использования текстовых файлов для программирования или API для передачи данных между двумя разными программами, конечно, нельзя. И я думаю, в этом нет ничего плохого, если это удобный формат работы для всех, и новые изобретения, не могут вытеснить устоявшиеся. Другой вопрос, среди множества различных подходов в современном мире нужно искать наиболее оптимальный для решения конкретной задачи. Например, когда программисты не готовы переходить к Fortran от Assembler, как в примере Виктора, с одной стороны, тормозит развитие, с другой, есть те задачи, где необходим именно Assembler. Мне кажется, что главное – не просто стремиться за новыми решениями, но и уметь выбрать самое подходящее.
Мне кажется, в современном мире, где программирование – не просто одна из областей инженеров, а составляющая жизни каждого человека, где технологии повсюду, где они являются основой бизнеса, неизбежно замедление темпов его развития. Конечно, сейчас внедрить новую технологию, новый подход к разработке требует времени, денег и ресурсов. Концепция, что любые устоявшиеся подходы – это временные решения, конечно, хороша с научной точки зрения, но не очень эффективна с практической. Я думаю, многие люди хотели бы выучить один необходимый им язык, один фреймворк и использовать их всю оставшуюся жизнь, не напрягаясь. Однако, в этом подходе кроется проблема – мир все время требует от вас чего-то нового. То, чему люди удивлялись десять лет назад, сегодня кажется обыденным, если не устаревшим, то что совсем недавно казалось революцией, сегодня – стагнация. И мне кажется, что лекция Виктора – призыв к экспериментам, к критическому взгляду на текущие инструменты и к осознанию, что программирование — это не набор правил, а процесс поиска новых идей. Именно поэтому концепция одного фреймворка на всю жизнь работать не может. Но многие даже не задумываются, что может быть иначе.
