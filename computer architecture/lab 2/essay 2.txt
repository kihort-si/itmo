Свою статью Эдвард Ли начинает с критики потоков, так как, по его мнению, они хоть и являются популярными, но делают программы сложными, недетерминированными и, следовательно, небезопасными. В качестве примеров он приводит состояние гонки, взаимные блокировки и другое непредсказуемое поведение, что усложняет разработку и тестирование. Кроме того, по мнению автора потоки не совместимы с человеческим разумом и очень сложны в понимании. В качестве альтернативы Эдвард Ли предлагает модели, основанные на детерминированных компонента, такие как Rendezvous Director, PN Director, SR Director, DE Director, координационные языки (Erlang, Ada), синхронные языки (Esterel, Lustre), акторно-ориентированные модели; где недетерминизм явно добавляется только там, где это необходимо. При этом он подчеркивает, что основная проблема в том, что самые популярные на момент написания статьи языки программирования используют именно потоки для параллелизма, и приходит к выводу, что паттерны проектирования, транзакционная память, формальный анализ программ и другие существующие методы лишь частично решают проблемы потоков, не устраняя их фундаментальную недетерминированность.
Проблемы потоков остаются актуальными, особенно с ростом многоядерных процессоров и сегодня, однако в реальности все оказалось не так страшно, как в прогнозе автора. Появились новые подходы, например, async/await, реактивное программирование, которые частично решают описанные проблемы, и мы не оказались в ситуации, когда все программы постоянно «падают» или работают некорректно из-за множества потоков. К тому же, важно понимать, что предложенные модели по-хорошему требует перестройки существующих систем, так как сложны в интеграции в готовые проекты, поэтому, хоть автор и приводит конкретные примеры, например, реализация Observer в качестве аргументов, мне кажется, что подобные проблемы устраняются локальными изменениями, что мы и увидели в результате, так как современные языки доказывают, что многие проблемы потоков решаемы на системном уровне. Мне кажется, что пессимистичный прогноз Ли не сбылся не потому, что он ошибся, а потому что индустрия адаптировалась к действительности, просто другими способами. При этом я думаю, что подобные критические мысли всегда должны высказываться, чтобы увеличить внимание к проблеме и найти компромисс в ее решении.
Данный отчет далеко не первый источник, где я вижу критику потоков. И действительно, те проблемы, которые привел Ли существуют, более того при большем желании можно выделить и десяток других. Однако на мой взгляд все это не является непосредственной проблемой многопоточного программирования, все это – следствие неправильного использования. Мы же не будем обвинять C++ в утечках памяти из-за того, что кто-то забыл про delete. Потоки дают нам больше возможностей, но требуют ручного управления. Как и любой мощный инструмент в программировании многопоточность имеет свои преимущества и недостатки и требует правильного применения там, где и когда это нужно. И как мы видим спустя почти 20 лет после написания статьи, потоки остались, а катастрофы не произошло. Ли был прав в главном: детерминизм должен быть по умолчанию. Современные подходы следуют этому принципу, скрывая недетерминизм потоков за предсказуемыми абстракциями, а предложенные им альтернативы так и не стали основой для систем, так как имеют свои проблемы, в том числе с интеграцией со старым кодом. Потоки же работают везде – это их ключевое преимущество.
